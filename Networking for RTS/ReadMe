This is a project that I'm really proud of. It is an MOBA/RTS and I was a gameplay/network engineer for this project. 
The reason I am proud of is because I implemented various networking features from ground up and these are the features that are
present in some of the top multiplayer games. It includes prediction and simulation of movement on the client and the server 
corrects the client in case of high latency. For this to happen, there had to be time synchronization between the client 
and the server.


There is a base class called pokemon which all characters inherit from and change load their specific mesh, skeleton and animation sets.
States is base class which all the states for different characters inherit from. It has three functions OnEnter(), Update() and 
OnExit() which is again overridden by different states. 

Networking:
The server maintains a ghostID for each character that is unique across all clients. When a character is spawned, a networkView for that
character is created and is assigned a ghostID. When state/attribute of a character changes in one client, I send events to all the 
clients indicating the ghostID and the parameter that needs to be changed in their instance of the game. The engine already supported
establishing the TCP connection between two clients. So my responsibility is to create the events, pack the data into a packet
when an event occurs and again unpacking it when its received.

The networking is stuctured in such a way that the first client to start the game is always the master. ALl the clients first send
crucial events such "hitting another character" to the master. Master checks if the "hit" is actually possible by checking the position 
of the two characters. If the master approves, the event is sent to rest of the clients and they update their game instances accordingly.


